"""
Teste Completo do Fluxo de Autentica√ß√£o
Login ‚Üí Dashboard ‚Üí Dados do Usu√°rio
"""
import requests
import json

BASE_URL = "http://127.0.0.1:8002"

print("=" * 70)
print("TESTE COMPLETO - FLUXO DE AUTENTICA√á√ÉO")
print("=" * 70)
print()

# Credenciais
EMAIL = "bruno@greenjobsbrasil.com.br"
PASSWORD = "Senha123!"

print(f"üìß Testando com: {EMAIL}")
print("-" * 70)
print()

# 1. LOGIN
print("1Ô∏è‚É£  FAZENDO LOGIN...")
try:
    login_data = {
        "username": EMAIL,
        "password": PASSWORD
    }
    
    response = requests.post(
        f"{BASE_URL}/api/auth/login",
        data=login_data,
        headers={"Content-Type": "application/x-www-form-urlencoded"}
    )
    
    if response.status_code == 200:
        tokens = response.json()
        access_token = tokens['access_token']
        print(f"‚úÖ Login bem-sucedido!")
        print(f"   Token: {access_token[:50]}...")
    else:
        print(f"‚ùå Erro no login: {response.status_code}")
        print(f"   {response.json()}")
        exit(1)
except Exception as e:
    print(f"‚ùå Erro: {e}")
    exit(1)

print()

# 2. BUSCAR DADOS DO USU√ÅRIO
print("2Ô∏è‚É£  BUSCANDO DADOS DO USU√ÅRIO...")
try:
    response = requests.get(
        f"{BASE_URL}/api/auth/me",
        headers={"Authorization": f"Bearer {access_token}"}
    )
    
    if response.status_code == 200:
        user = response.json()
        print(f"‚úÖ Dados obtidos com sucesso!")
        print(f"   ID: {user['id']}")
        print(f"   Nome: {user['full_name']}")
        print(f"   Email: {user['email']}")
        print(f"   Tipo: {user['user_type']}")
        print(f"   Ativo: {user['is_active']}")
        print(f"   Verificado: {user['is_verified']}")
    else:
        print(f"‚ùå Erro ao buscar dados: {response.status_code}")
except Exception as e:
    print(f"‚ùå Erro: {e}")

print()

# 3. ACESSAR DASHBOARD
print("3Ô∏è‚É£  ACESSANDO DASHBOARD...")
try:
    response = requests.get(f"{BASE_URL}/dashboard")
    if response.status_code == 200:
        print(f"‚úÖ Dashboard acess√≠vel!")
        print(f"   Status: {response.status_code}")
        print(f"   Tamanho: {len(response.text)} bytes")
    else:
        print(f"‚ùå Erro ao acessar dashboard: {response.status_code}")
except Exception as e:
    print(f"‚ùå Erro: {e}")

print()

# 4. BUSCAR ESTAT√çSTICAS
print("4Ô∏è‚É£  BUSCANDO ESTAT√çSTICAS DO SISTEMA...")
try:
    response = requests.get(f"{BASE_URL}/api/stats")
    if response.status_code == 200:
        stats = response.json()
        print(f"‚úÖ Estat√≠sticas obtidas!")
        print(f"   Empresas: {stats.get('total_empresas', 0)}")
        print(f"   Vagas: {stats.get('total_vagas', 0)}")
        print(f"   Profissionais: {stats.get('total_profissionais', 0)}")
        print(f"   Score M√©dio: {stats.get('score_medio_empresas', 0):.1f}%")
    else:
        print(f"‚ö†Ô∏è  Stats n√£o dispon√≠veis: {response.status_code}")
except Exception as e:
    print(f"‚ö†Ô∏è  Erro ao buscar stats: {e}")

print()

# 5. BUSCAR MATCHING
print("5Ô∏è‚É£  BUSCANDO ESTAT√çSTICAS DE MATCHING...")
try:
    response = requests.get(f"{BASE_URL}/api/matching/stats")
    if response.status_code == 200:
        matching = response.json()
        print(f"‚úÖ Matching stats obtidas!")
        print(f"   Candidaturas: {matching.get('total_candidaturas', 0)}")
        print(f"   Score M√©dio: {matching.get('score_medio', 0):.1f}%")
        print(f"   Matches ‚â•80%: {matching.get('matches_excelentes', 0)}")
    else:
        print(f"‚ö†Ô∏è  Matching stats n√£o dispon√≠veis: {response.status_code}")
except Exception as e:
    print(f"‚ö†Ô∏è  Erro ao buscar matching: {e}")

print()

# 6. VERIFICAR TOKEN
print("6Ô∏è‚É£  VERIFICANDO VALIDADE DO TOKEN...")
try:
    response = requests.get(
        f"{BASE_URL}/api/auth/verify-token",
        headers={"Authorization": f"Bearer {access_token}"}
    )
    
    if response.status_code == 200:
        verify = response.json()
        print(f"‚úÖ Token v√°lido!")
        print(f"   User ID: {verify['user_id']}")
        print(f"   Email: {verify['email']}")
    else:
        print(f"‚ùå Token inv√°lido: {response.status_code}")
except Exception as e:
    print(f"‚ùå Erro: {e}")

print()

# 7. TESTAR P√ÅGINAS PRINCIPAIS
print("7Ô∏è‚É£  TESTANDO ACESSO √ÄS P√ÅGINAS...")
pages = [
    ("/", "Home"),
    ("/dashboard", "Dashboard"),
    ("/empresas", "Empresas"),
    ("/vagas", "Vagas"),
    ("/profissionais", "Profissionais"),
    ("/ml-avancado", "ML Dashboard"),
]

for path, name in pages:
    try:
        response = requests.get(f"{BASE_URL}{path}", timeout=3)
        status = "‚úÖ" if response.status_code == 200 else "‚ùå"
        print(f"   {status} {name}: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå {name}: ERRO")

print()
print("=" * 70)
print("TESTE COMPLETO FINALIZADO!")
print("=" * 70)
print()
print("üåê ACESSE AS P√ÅGINAS:")
print(f"   Login: {BASE_URL}/login")
print(f"   Dashboard: {BASE_URL}/dashboard")
print()
print("üìù SUAS CREDENCIAIS:")
print(f"   Email: {EMAIL}")
print(f"   Senha: {PASSWORD}")
print()
print("=" * 70)
